{"pages":[{"title":"","text":"简介: 喜欢搞事情的年轻人 姓名：black_chen(我是不会暴漏我的真实姓名的) 年龄：大好青年 爱好：王者农药、、、游山玩水，电子设备… 联系我：QQ. 756319278 weChat. black_listen 放一首诗 我说你是人间的四月天； 笑响点亮了四面风；轻灵 在春的光艳中交舞着变。 你是四月早天里的云烟， 黄昏吹着风的软，星子在 无意中闪，细雨点洒在花前。 那轻，那娉婷你是，鲜妍 百花的冠冕你戴着，你是 天真，庄严，你是夜夜的月圆。 雪化后那篇鹅黄，你象；新鲜 初放芽的绿，你是；柔嫩喜悦 水光浮动着你梦期待中白莲。 你是一树一树的花开，是燕 在梁间呢喃，——你是爱，是暖， 是希望，你是人间的四月天！ Something wrong with this article? Click here to submit your revision. document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/about/index.html"}],"posts":[{"title":"Flex布局","text":"网页布局（layout）是 CSS 的一个重点应用。 布局的传统解决方案，基于盒状模型，依赖 display属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。本文主要介绍了使用display: flex可以进行的一些布局。 2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。 以下内容主要参考了下面两篇文章：A Complete Guide to Flexbox 和 A Visual Guide to CSS3 Flexbox Properties。 Flex布局是什么Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为 Flex 布局。 123.box { display: flex} 行内元素也可以使用Flex布局 123.box { display: inline-flex} Webkit 内核的浏览器，必须加上-webkit前缀。 1234.box{ display: -webkit-flex; /* Safari */ display: flex;} 注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。 基本概念采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。 项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。 容器的属性以下6个属性设置在容器上。 flex-direction flex-wrap flex-flow justify-content align-items align-content flex-direction属性flex-direction属性决定主轴的方向（即项目的排列方向）。 123.box { flex-direction: row | row-reverse | column | column-reverse;} 它可能有4个值。 row（默认值）：主轴为水平方向，起点在左端 row-reverse：主轴为水平方向，起点在右端。 column：主轴为垂直方向，起点在上沿。 column-reverse：主轴为垂直方向，起点在下沿。 示例：flex-direction flex-wrap属性默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。 123.box{ flex-wrap: nowrap | wrap | wrap-reverse;} 它可能取三个值。 （1）nowrap（默认）：不换行。 （2）wrap：换行，第一行在上方。 （3）wrap-reverse：换行，第一行在下方。 示例：flex-wrap flex-flowflex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。 123.box { flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;} 示例：flex-flow justify-content属性justify-content属性定义了项目在主轴上的对齐方式。 123.box { justify-content: flex-start | flex-end | center | space-between | space-around;} 它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。 flex-start（默认值）：左对齐 flex-end：右对齐 center： 居中 space-between：两端对齐，项目之间的间隔都相等。 space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。 示例：justify-content align-items属性align-items属性定义项目在交叉轴上如何对齐。 123.box { align-items: flex-start | flex-end | center | baseline | stretch;} 它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。 flex-start：交叉轴的起点对齐。 flex-end：交叉轴的终点对齐。 center：交叉轴的中点对齐。 baseline: 项目的第一行文字的基线对齐。 stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。 示例：align-items align-content属性align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。 123.box { align-content: flex-start | flex-end | center | space-between | space-around | stretch;} 该属性可能取6个值。 flex-start：与交叉轴的起点对齐。 flex-end：与交叉轴的终点对齐。 center：与交叉轴的中点对齐。 space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。 space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。 stretch（默认值）：轴线占满整个交叉轴。 示例：align-content 项目的属性以下6个属性设置在项目上。 order flex-grow flex-shrink flex-basis flex align-self order属性order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。 123.item { order: &lt;integer&gt;;} 示例：order flex-grow属性flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。 123.item { flex-grow: &lt;number&gt;; /* default 0 */} 如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。 示例：flex-grow flex-shrink属性flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。 123.item { flex-shrink: &lt;number&gt;; /* default 1 */} 如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。 负值对该属性无效。 示例：flex-shrink flex-basis属性flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。 123.item { flex-basis: &lt;length&gt; | auto; /* default auto */} 它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。 示例：flex-basis flex属性flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。 123.item { flex: none | [ &lt;'flex-grow'&gt; &lt;'flex-shrink'&gt;? || &lt;'flex-basis'&gt; ]} 该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。 建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。 示例：flex align-self属性align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。 123.item { align-self: auto | flex-start | flex-end | center | baseline | stretch;} 该属性可能取6个值，除了auto，其他都与align-items属性完全一致。 示例：align-self 参照：原文 Something wrong with this article? Click here to submit your revision. Vector Landscape Vectors by Vecteezy document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/Css/flex%E5%B8%83%E5%B1%80/"},{"title":"Chocolatey Window设计的包管理器","text":"Chocolatey Windows设计的包管理器，有了它，你也可以 Git Bash/Shell1choco install docker Why Chocolatey 安装 Windows 7+ / Windows Server 2003+ PowerShell v2+ (minimum is v3 for install from this website due to TLS 1.2 requirement) .NET Framework 4+ (the installation will attempt to install .NET 4.0 if you do not have it installed)(minimum is 4.5 for install from this website due to TLS 1.2 requirement) 只要你的系统在Win7以上就可以了，打开开始菜单，右键以管理员身份运行PowerShell，然后粘贴以下命令 Git Bash/Shell1Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')) Installing Chocolatey 检查是否安装成功 Git Bash/Shell1choco 安装一个应用 以deno为例 Git Bash/Shell1choco install deno 一些命令 安装choco install deno 升级choco upgrade deno 卸载choco uninstall deno 搜索choco search deno 查看已安装的包choco list -lo Chocolatey docs Something wrong with this article? Click here to submit your revision. Vector Landscape Vectors by Vecteezy document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/Configuration/chocolatey-window%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/"},{"title":"commitizen规范commit","text":"在多人协作的项目中，如果Git提交说明过于混乱，是不利于代码review的。如果Git提交说明足够精准、详细，不仅有利于代码的review也有利于后期排查问题，甚至我们可以根据commit信息生成响应日志。本文主要介绍通过cz工具，以及附和Angular规范的提交说明来规范commit信息。也可以查看vuejs，他的提交说明就是根据Angular规范来的。本文示例: cz-example 配置Git Bash/Shell12npm install -g commitizennpm install @commitlint/cli @commitlint/config-conventional conventional-changelog conventional-changelog-cli cz-conventional-changelog husky -D 创建commitlint.config.js javascript123module.exports = { extends: ['@commitlint/config-conventional']} 修改package.json 点击展开代码 &gt;folded12345678910111213\"scripts\": { \"version\": \"conventional-changelog -p angular -i CHANGELOG.md -s -r 0 &amp;&amp; git add CHANGELOG.md\"},\"config\": { \"commitizen\": { \"path\": \"./node_modules/cz-conventional-changelog\" }},\"husky\": { \"hooks\": { \"commit-msg\": \"commitlint -E HUSKY_GIT_PARAMS\" }} 提交流程 git cz Select the type of change that you’re committing feat: A new feature fix: A bug fix docs: Documentation only changes style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc) refactor: A code change that neither fixes a bug nor adds a feature perf: A code change that improves performance test: Adding missing tests or correcting existing tests What is the scope of this change (e.g. component or file name): (press enter to skip) 填写所修改的组件、文件名。可跳过 Write a short, imperative tense description of the change 进行一个简短的描述 max 94 Provide a longer description of the change 进行一个详细的描述可跳过 Are there any breaking changes? 是否发生重大改变 可跳过 A BREAKING CHANGE commit requires a body. Please enter a longer description of the commit itself：重大改变的描述 git pull git push 在merge到master之前需要生成CHANGELOG，之后合并最近的两个commit即可merge 具体解释规范的Git提交说明 提供更多的历史信息，方便快速浏览 可以过滤某些commit，便于筛选代码review 可以追踪commit生成更新日志 可以关联issues Git提交说明结构Git提交说明可分为三个部分：Header、Body和Footer。 1&lt;Header&gt; &lt;Body&gt; &lt;Footer&gt; HeaderHeader部分包括三个字段type（必需）、scope（可选）和subject（必需）。 1&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;ja Vue源码的提交说明省略了scope。 typetype用于说明 commit 的提交性质。 值 描述 feat 新增一个功能 fix 修复一个bug docs 文档变更 style 代码格式（不影响功能，例如空格、分号等格式修正） refactor 代码重构 perf 改善性能 test 测试 build 变更项目构建或外部依赖（例如scopes：webpack、gulp、npm等） ci 更改持续集成软件的配置文件和package中的scripts命令，例如scopes：Travis、Circle等 chore 变更构建流程活辅助工具 revert 代码回退 scopescope说明commit影响的范围。scope依据项目而定，例如在业务项目中可以依据菜单或者功能模块划分，如果是组件库开发，则可以依据组件划分。 提示：scope可以省略。 subjectsubject是commit的简短描述。 Bodycommit的详细描述，说明代码提交的详细说明。 Footer如果代码的提交是不兼容变更或关闭缺陷，则Footer必需，否则可以省略。 不兼容变更当前代码与上一个版本不兼容，则Footer以BREAKING CHANGE开头，后面是对变动的描述、以及变动的理由和迁移方法。 关闭缺陷如果当前提交是针对特定的issue，那么可以在Footer部分填写需要关闭的单个 issue 或一系列issues。 Commitizencommitizen/cz-cli是一个可以实现规范的提交说明的工具： When you commit with Commitizen, you’ll be prompted to fill out any required commit fields at commit time. No more waiting until later for a git commit hook to run and reject your commit (though that can still be helpful). No more digging through CONTRIBUTING.md to find what the preferred format is. Get instant feedback on your commit message formatting and be prompted for required fields. 提供选择的提交信息类别，快速生成提交说明。安装cz工具: Git Bash/Shell1npm install -g commitizen Commitizen适配器cz-conventional-changelog如果需要在项目中使用commitizen生成符合AngularJS规范的提交说明，初始化cz-conventional-changelog适配器： Git Bash/Shell1commitizen init cz-conventional-changelog --save --save-exact 初始化命令主要进行了3件事情 在项目中安装cz-conventional-changelog 适配器依赖 将适配器依赖保存到package.json的devDependencies字段信息 在package.json中新增config.commitizen字段信息，主要用于配置cz工具的适配器路径： json12345678\"devDependencies\": { \"cz-conventional-changelog\": \"^2.1.0\"},\"config\": { \"commitizen\": { \"path\": \"./node_modules/cz-conventional-changelog\" }} Commitizen日志如果使用了cz工具集，配套conventional-changelog可以快速生成开发日志： Git Bash/Shell1npm install conventional-changelog conventional-changelog-cli -D 在pacage.json中加入生成日志命令： json1\"version\": \"conventional-changelog -p angular -i CHANGELOG.md -s -r 0 &amp;&amp; git add CHANGELOG.md\" You could follow the following workflow Make changes Commit those changes Pull all the tags Run the npm version [patch|minor|major] command Push 执行npm run version后可查看生产的日志CHANGELOG.md。 注意要使用正确的Header的type，否则生成的日志会不准确，这里只是一个示例，生成的日志不是很严格。 参考Cz工具集使用介绍 - 规范Git提交说明 Something wrong with this article? Click here to submit your revision. Vector Landscape Vectors by Vecteezy document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/Git/commitizen%E8%A7%84%E8%8C%83commit/"},{"title":"Electron问题集合","text":"Electron6.0.0版本部分window7设备上黑屏问题解决方案，官方问题issues Electron6.0.0版本部分window7设备上黑屏问题具体解决方案，安装.NET Framework 4.7.1window修复更新 下载修复页 根据不同的win7版本下载对应的补丁安装即可 Something wrong with this article? Click here to submit your revision. Vector Landscape Vectors by Vecteezy document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/FAQ/electron%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/"},{"title":"Electron学习笔记","text":"记录自己学习Electron所整理出来的一些学习笔记。仅为个人笔记，所以写的不好，不够清晰，只会留下当时的部分思路，作为后来有问题时的速查笔记。大部分摘自官方文档，文档太长，只挑了当时的重点记录。 webview By default the webview tag is disabled in Electron &gt;= 5. 在构造 BrowserWindow 时，需要通过设置 webviewTag webPreferences选项来启用标签 当Electron版本大于等于5，需要在BrowserWindow的实例中手动开启webviewTag标签 webview BrowserWIndow使用BrowserWindow创建一个父子窗口 示例代码123456789101112131415const { app, BrowserWindow } = require(\"electron\");const createWindow = () =&gt; { let parent = new BrowserWindow(); // parent 代表是否放置在父窗体上方 let child = new BrowserWindow({ parent }); parent.loadURL(\"https://www.google.com\"); child.loadURL(\"https://www.baidu.com\"); parent.show(); child.show();};app.on('ready', () =&gt; createWindow()) BrowserWindow Dialog 显示用于打开和保存文件、警报等的本机系统对话框 示例代码123dialog.showMessageBox(child, { message: '这是一条信息'}) Dialog Something wrong with this article? Click here to submit your revision. Vector Landscape Vectors by Vecteezy document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/Learning/electron%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"title":"Git操作指南","text":"整理的一些Git常用命令，以及进阶命令git rebase，从这里你可以学到基础的Git配置命令、分支管理、fetch指令、git撤销、状态查询、文档查询、文件暂存、差异比较、基本操作、git进阶之rebase 配置命令列出当前配置 Git Bash/Shell1git config --list 列出Repository配置 Git Bash/Shell1git config --local --list 列出全局配置 Git Bash/Shell1git config --global --list 列出系统配置 Git Bash/Shell1git config --system --list 配置用户名 Git Bash/Shell1git config --global user.name \"your name\" 配置用户邮箱 Git Bash/Shell1git config --global user.email \"youremail@github.com\" 分支管理查看本地分支 Git Bash/Shell1git branch 查看远程分支 Git Bash/Shell1git branch -r 查看本地和远程分支 Git Bash/Shell1git branch -a 从当前分支切换到其它分支 Git Bash/Shell1git checkout &lt;branch-name&gt; 创建并切换到新分支 Git Bash/Shell1git checkout -b &lt;branch-name&gt; 删除分支 Git Bash/Shell1git branch -d &lt;branch-name&gt; 当前分支与指定分支合并 Git Bash/Shell1git merge &lt;branch-name&gt; 查看哪些分支已经/没有合并到当前分支 Git Bash/Shell12git branch --mergedgit branch --no-merged 查看各个分支最后一个提交对应的信息 Git Bash/Shell1git branch -v 删除远程分支 Git Bash/Shell1git push origin -d &lt;branch-name&gt; 重命名分支 Git Bash/Shell1git branch -m &lt;oldbranch-name&gt; &lt;newbranch-name&gt; 拉取远程分支并创建本地分支 Git Bash/Shell123git checkout -b 本地分支名 origin/远程分支名orgit fetch origin &lt;branch-name&gt;:&lt;local-branch-name&gt; fetch指令将远程仓库的内容更新到本地 Git Bash/Shell1git fetch origin &lt;branch-name&gt;:&lt;local-branch-name&gt; 一般而言，这个origin是远程主机名，一般默认就是origin。 branch-name 你要拉取的分支 local-branch-name 通常而言，就是你本地新建一个新分支，将origin下的某个分支代码下载到本地分支。 将某个远程主机的更新，全部取回本地 Git Bash/Shell1git fetch &lt;远程主机名&gt; 取回特定分支 Git Bash/Shell1git fetch &lt;远程主机名&gt; &lt;分支名&gt; 将某个分支的内容取回到本地的某个分支 Git Bash/Shell1git fetch origin :&lt;local-branch-name&gt; git pull 和 git fetch的区别？ git撤销撤销工作区修改 Git Bash/Shell1git checkout-- 暂存区文件撤销(不覆盖工作区) Git Bash/Shell1git reset HEAD 版本回退 git reset –(soft|mixed|hard) &lt;HEAD~(num)&gt; | 指令 作用范围 –hard 回退全部，包括HEAD，index，working，tree –mixed 回退部分，包括HEAD，index –soft 只回退HEAD 状态查询查看状态 Git Bash/Shell1git status 查看历史操作记录 Git Bash/Shell1git reflog 查看日志 Git Bash/Shell1git log 文档查询展示Git命令大纲 Git Bash/Shell1git help (--help) 展示Git命令大纲全部列表 Git Bash/Shell1git help -a 展示具体命令说明手册 Git Bash/Shell1git help 文件暂存添加改动到stash Git Bash/Shell1git stash sava -a \"message\" 删除暂存 Git Bash/Shell1git stash drop stash@{ID} 查看stash列表 Git Bash/Shell1git stash list 删除全部缓存 Git Bash/Shell1git stash clear 恢复改动 Git Bash/Shell1git stash pop stash@{ID} 差异比较比较工作区与缓存区 Git Bash/Shell1git diff 比较缓存区与本地库最近一次commit内容 Git Bash/Shell1git diff --cached 比较工作区与本地最近一次commit内容 Git Bash/Shell1git diff HEAD 比较两个commit之间的差异 Git Bash/Shell1git diff 基本操作创建本地仓库 Git Bash/Shell1git init 链接本地仓库与远程仓库 Git Bash/Shell12git remote add originorigin默认是远端仓库别名url 可以使用https或者ssh的方式 检查配置信息 Git Bash/Shell1git config --list Git user name and email Git Bash/Shell12git config --global user.name \"yourname\"git config --global user.email \"youremail\" 生成SSH秘钥 Git Bash/Shell12ssh-keygen -t rsa -C \"youremail\"cd ~/.ssh 里面有一个文件名为id_rsa.pub, 把里面的内容复制到git库的我的SSHKEYS中 查看远端仓库信息 Git Bash/Shell1git remote -v 远端仓库重新命名 Git Bash/Shell1git remote rename old new 提交到缓存区 Git Bash/Shell12git add . 全部文件git add 指定文件 提交到本地仓库 Git Bash/Shell1git commit -m \"message\" 提交到远程仓库 Git Bash/Shell1git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt; git 进阶之rebaseGit commits历史是如何做到如此清爽的？ Rebase场景一：如何合并多次提交记录 合并最近的n次提交记录 Git Bash/Shell1git rebase -i HEAD~n 进入vi编辑模式 pick：保留该commit（缩写:p） reword：保留该commit，但我需要修改该commit的注释（缩写:r） edit：保留该commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e） squash：将该commit和前一个commit合并（缩写:s） fixup：将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写:f） exec：执行shell命令（缩写:x） drop：我要丢弃该commit（缩写:d） 如果保存的时候，出错 JavaScript1error: cannot 'squash' without a previous commit 注意不要合并先前提交的东西，也就是已经提交远程分支的纪录。 如果你异常退出了 vi 窗口 Git Bash/Shell1git rebase --edit-todo 这时候会一直处在这个编辑的模式里，我们可以回去继续编辑，修改完保存一下 Git Bash/Shell1git rebase --continue 查看结果 Git Bash/Shell1git log Rebase场景二：分支合并 我们先从 master 分支切出一个 dev 分支，进行开发： Git Bash/Shell1git checkout -b feature 这时候，你的同事完成了一次 hotfix，并合并入了 master 分支，此时 master 已经领先于你的 feature 分支了 恰巧，我们想要同步 master 分支的改动，首先想到了 merge 让我们来试试 git rebase而不是使用merge Git Bash/Shell1git rebase master 首先，git 会把 feature 分支里面的每个 commit 取消掉；其次，把上面的操作临时保存成 patch 文件，存在 .git/rebase 目录下；然后，把 feature 分支更新到最新的 master 分支；最后，把上面保存的 patch 文件应用到 feature 分支上； 从 commit 记录我们可以看出来，feature 分支是基于 hotfix 合并后的 master ，自然而然的成为了最领先的分支，而且没有 merge 的 commit 记录，是不是感觉很舒服了。 在 rebase 的过程中，也许会出现冲突 conflict。在这种情况，git 会停止 rebase 并会让你去解决冲突。在解决完冲突后，用 git add 命令去更新这些内容 Git Bash/Shell1git rebase --continue 这样 git 会继续应用余下的 patch 补丁文件。 在任何时候，我们都可以用 --abort 参数来终止 rebase 的行动，并且分支会回到 rebase 开始前的状态。 Git Bash/Shell1git rebase —abort 参考https://juejin.im/post/6869519303864123399 http://jartto.wang/2018/12/11/git-rebase/ https://git-scm.com/book/zh/v2/ Something wrong with this article? Click here to submit your revision. Vector Landscape Vectors by Vecteezy document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/Git/git%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/"},{"title":"JSON.stringify()","text":"JSON.stringify() 方法将一个 JavaScript 对象或值转换为 JSON 字符串，如果指定了一个 replacer 函数，则可以选择性地替换值，或者指定的 replacer 是数组，则可选择性地仅包含数组指定的属性。 语法 JSON.stringify(value[, replacer [, space]]) 参数 value将要序列化成 一个 JSON 字符串的值。 replacer | 可选如果该参数是一个函数，则在序列化过程中，被序列化的值的每个属性都会经过该函数的转换和处理；如果该参数是一个数组，则只有包含在这个数组中的属性名才会被序列化到最终的 JSON 字符串中；如果该参数为 null 或者未提供，则对象所有的属性都会被序列化。 space | 可选指定缩进用的空白字符串，用于美化输出（pretty-print）；如果参数是个数字，它代表有多少的空格；上限为10。该值若小于1，则意味着没有空格；如果该参数为字符串（当字符串长度超过10个字母，取其前10个字母），该字符串将被作为空格；如果该参数没有提供（或者为 null），将没有空格。 返回值一个表示给定值的JSON字符串。 特性对于 undefined、任意的函数以及 symbol 三个特殊的值分别作为对象属性的值、数组元素、单独的值时的不同返回结果。 undefined、任意的函数以及 symbol 作为对象属性值时 JSON.stringify() 跳过（忽略）对它们进行序列化示例代码1234567891011const data = { a: \"aaa\", b: undefined, c: Symbol(\"dd\"), fn: function() { return true; }};JSON.stringify(data); // 输出：？// \"{\"a\":\"aaa\"}\" undefined、任意的函数以及 symbol 作为数组元素值时，JSON.stringify() 将会将它们序列化为 null示例代码12345JSON.stringify([\"aaa\", undefined, function aa() { return true}, Symbol('dd')]) // 输出：？// \"[\"aaa\",null,null,null]\" undefined、任意的函数以及 symbol 被 JSON.stringify() 作为单独的值进行序列化时都会返回 undefined示例代码123456JSON.stringify(function a (){console.log('a')})// undefinedJSON.stringify(undefined)// undefinedJSON.stringify(Symbol('dd'))// undefined 非数组对象的属性不能保证以特定的顺序出现在序列化后的字符串中因为null function symbol都会被忽略掉，所以必然是没有特定的顺序的 示例代码1234567891011121314151617const data = { a: \"aaa\", b: undefined, c: Symbol(\"dd\"), fn: function() { return true; }, d: \"ddd\"};JSON.stringify(data); // 输出：？// \"{\"a\":\"aaa\",\"d\":\"ddd\"}\"JSON.stringify([\"aaa\", undefined, function aa() { return true}, Symbol('dd'),\"eee\"]) // 输出：？// \"[\"aaa\",null,null,null,\"eee\"]\" 转换值如果有 toJSON() 函数，该函数返回什么值，序列化结果就是什么值，并且忽略其他属性的值。拥有toJSON函数后进行序列化会默认走toJSON 示例代码1234567JSON.stringify({ say: \"hello JSON.stringify\", toJSON: function() { return \"today i learn\"; }})// \"today i learn\" JSON.stringify() 将会正常序列化 Date 的值默认调用的是toISOString()会自动转化为国际化时间 示例代码12JSON.stringify({ now: new Date() });// \"{\"now\":\"2020-07-21T06:07:14.864Z\"}\" NaN 和 Infinity 格式的数值及 null 都会被当做 null。示例代码123456JSON.stringify(NaN)// \"null\"JSON.stringify(null)// \"null\"JSON.stringify(Infinity)// \"null\" 布尔值、数字、字符串的包装对象在序列化过程中会自动转换成对应的原始值。示例代码12JSON.stringify([new Number(1), new String(\"false\"), new Boolean(false)]);// \"[1,\"false\",false]\" 其他类型的对象，包括 Map/Set/WeakMap/WeakSet，仅会序列化可枚举的属性。仅会序列化可枚举的属性 示例代码1234567891011// 不可枚举的属性默认会被忽略：JSON.stringify( Object.create( null, { x: { value: 'json', enumerable: false }, y: { value: 'stringify', enumerable: true } } ));// \"{\"y\":\"stringify\"}\" 对包含循环引用的对象（对象之间相互引用，形成无限循环）执行此方法，会抛出错误。示例代码12345678910111213141516171819202122232425// 对包含循环引用的对象（对象之间相互引用，形成无限循环）执行此方法，会抛出错误。 const obj = { name: \"loopObj\"};const loopObj = { obj};// 对象之间形成循环引用，形成闭环obj.loopObj = loopObj;// 封装一个深拷贝的函数function deepClone(obj) { return JSON.parse(JSON.stringify(obj));}// 执行深拷贝，抛出错误deepClone(obj)/** VM44:9 Uncaught TypeError: Converting circular structure to JSON --&gt; starting at object with constructor 'Object' | property 'loopObj' -&gt; object with constructor 'Object' --- property 'obj' closes the circle at JSON.stringify (&lt;anonymous&gt;) at deepClone (&lt;anonymous&gt;:9:26) at &lt;anonymous&gt;:11:13*/ 所有以 symbol 为属性键的属性都会被完全忽略掉，即便 replacer 参数中强制指定包含了它们。示例代码1234567JSON.stringify({ [Symbol.for(\"json\")]: \"stringify\" }, function(k, v) { if (typeof k === \"symbol\") { return v; }})// undefined 如何序列化undefined function symbol示例代码12345678910111213141516171819202122232425const data = { a: \"aaa\", b: undefined, c: Symbol(\"dd\"), fn: function() { return true; }};// 不用 replacer 参数时JSON.stringify(data); // \"{\"a\":\"aaa\"}\"// 使用 replacer 参数作为函数时JSON.stringify(data, (key, value) =&gt; { switch (typeof value) { case \"undefined\": return \"undefined\"; case \"symbol\": return value.toString(); case \"function\": return value.toString(); } return value;})// \"{\"a\":\"aaa\",\"b\":\"undefined\",\"c\":\"Symbol(dd)\",\"fn\":\"function() {\\n return true;\\n }\"}\" 或者 示例代码1234567891011JSON.stringify(data, (key, value) =&gt; { switch (typeof value) { case \"undefined\": return \"undefined\"; case \"symbol\": return value.toString(); case \"function\": return value.toString(); } return value;}) TO 示例代码1JSON.stringify(data, (key, value) =&gt; (['undefined', 'symbol', 'function'].includes(typeof Value) ? String(value) : value)); 如何序列化某一项值 replacer 作为数组时，结果非常简单，数组的值就代表了将被序列化成 JSON 字符串的属性名 示例代码12345678const jsonObj = { name: \"JSON.stringify\", params: \"obj,replacer,space\"};// 只保留 params 属性的值JSON.stringify(jsonObj, [\"params\"]);// \"{\"params\":\"obj,replacer,space\"}\" 参考MDN JSON stringify 你不知道的 JSON.stringify() 的威力 Something wrong with this article? Click here to submit your revision. Vector Landscape Vectors by Vecteezy document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/JavaScript%E6%B7%B1%E5%85%A5/json-stringify/"},{"title":"如何自定义切换Node源✨","text":"在我们使用nodejs进行安包时，常常使用淘宝镜像 https://registry.npm.taobao.org/ ，也是是cnpm源。nodejs默认使用npm源，npm源在下载一些国外资源是速度比较慢，这个时候我们会考虑使用npm config全局配置cnpm源。但由于我们有时候会有一些package放在自己的npm私服上面，我们可能需要在npm cnpm 自己的npm源上面来回切换，这个时候我们使用npm config进行全局配置就略显麻烦了。所以我们使用nrm进行npm源的管理。 全局安装nrm Git Bash/Shell1npm install nrm -g or yarn global add nrm 一些基础命令 Git Bash/Shell123456789101112nrm -V # 查看版本nrm ls # 查看当前可选的源 * npm ----- https://registry.npmjs.org/ yarn ----- https://registry.yarnpkg.com cnpm ---- http://r.cnpmjs.org/ taobao -- https://registry.npm.taobao.org/ nj ------ https://registry.nodejitsu.com/ skimdb -- https://skimdb.npmjs.com/registrynrm add &lt;registry&gt; &lt;url&gt; [home] # 添加新源nrm del &lt;registry&gt; # 删除nrm use &lt;registry&gt; 选择你要使用的源 Something wrong with this article? Click here to submit your revision. Vector Landscape Vectors by Vecteezy document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/Configuration/%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%87%E6%8D%A2node%E6%BA%90%E2%9C%A8/"},{"title":"安装多个版本的node✨","text":"nodejs是前端经常使用到的，nodejs拥有很多版本，我们一般使用官方提供的稳定版本就好了，当然，如果你想体验一些新功能 新特性 可以使用最新版本的nodejs。在我们团队的协作中，因为有package.json的存在，所以我们尽量保证团队是用的nodejs版本一致。这个时候我们就需要版本控制工具nvm了。 window下使用nvm🚗下载链接 程序安装过程中，在 Set Node.js Symlink 这一步目录设置，是待会 nvm use 存放你的 nodejs 程序的目录 Git Bash/Shell12345nvm v # 查看版本nvm install latest # 下载最新版本的nodenvm install 12.1.0 # 下载12.1.0版本的nodenvm install 12.1.0 32 # 默认64位 32位需指定nvm uninstall 12.1.0 # 卸载对应的版本 下载完成后，会在\\nvm文件下多一个v12.1.0的文件夹 Git Bash/Shell1nvm use 12.1.0 # 引入使用 Git Bash/Shell12nvm ls # 查看已安装的node版本 * 12.1.0 (Currently using 64-bit executable) Mac下使用nvm🚗Git Bash/Shell1curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.0/install.sh | bash 或 Git Bash/Shell1wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.0/install.sh | bash 执行完后重启终端 Git Bash/Shell1nvm install 12.13.0 # 安装指定版本 Git Bash/Shell1nvm use 12.13.0 # 使用指定版本 文档链接 Something wrong with this article? Click here to submit your revision. document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/Configuration/%E5%AE%89%E8%A3%85%E5%A4%9A%E4%B8%AA%E7%89%88%E6%9C%AC%E7%9A%84node%E2%9C%A8/"},{"title":"Window Terminal美化💖","text":"Window Terminal终端程序是一款新式、快速、高效、强大且高效的终端应用程序，适用于命令行工具和命令提示符，PowerShell和WSL等Shell用户。主要功能包括多个选项卡、窗格、Unicode、和UTF-8字符支持，GPU加速文本渲染引擎以及自定义主题、样式和配置。 安装Window Terminal安装Window Terminal，通过Microsoft Store商店安装即可，安装Window Terminal对系统有一定的要求。系统版本必须为Windows 10版本 18362.0或更好的版本，必须为x86 ARM64 x64体系结构。Window Terminal是一个开源项目，地址 配置字体这里我使用的事Fira Code字体，地址 配置主题这里我使用的是posh-git、on-my-posh主题。安装，使用window powerShell 最好使用管理员权限 window powerShell12Install-Module posh-git -Scope CurrentUser Install-Module oh-my-posh -Scope CurrentUser 配置和切换主题 window powerShell1234$PROFILEif (!(Test-Path -Path $PROFILE )) { New-Item -Type File -Path $PROFILE -Force }notepad $PROFILE 也可直接使用命令$PROFILE，会输出默认配置文件的地址，一般会在C盘 在打开的文件中添加，这样配置的是默认的主题 ps1123Import-Module posh-gitImport-Module oh-my-poshSet-Theme Sorin 切换主题 Git Bash/Shell/Terminal1Set-Theme ${主题名字} 以下是可用的主题名字：Agnoster、Avit、Darkblood、Fish、Honukai、Paradox、Sorin、tehrob 配置Window Terminal打开设置 添加defaults和schemes 点击展开代码 &gt;folded123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081\"defaults\": { // Put settings here that you want to apply to all profiles. \"fontFace\": \"Fira Code\", // oh-my-posh 主题原因，使用其他的字体可能会出现乱码 \"backgroundImage\": \"F:\\\\vscodeBg\\\\014.jpg\", // 背景图片地址 \"backgroundImageOpacity\": 0.4, // 透明度 \"colorScheme\": \"Andromeda\", // 颜色方案 \"acrylicOpacity\": 0.7, \"useAcrylic\": true},\"schemes\": [ { \"name\": \"Andromeda\", \"black\": \"#000000\", \"red\": \"#cd3131\", \"green\": \"#05bc79\", \"yellow\": \"#09da0f\", // \"yellow\": \"#e5e512\", \"blue\": \"#2472c8\", \"purple\": \"#bc3fbc\", \"cyan\": \"#0fa8cd\", \"white\": \"#e5e5e5\", \"brightBlack\": \"#666666\", \"brightRed\": \"#cd3131\", \"brightGreen\": \"#05bc79\", \"brightYellow\": \"#09da0f\", // \"brightYellow\": \"#e5e512\", \"brightBlue\": \"#2472c8\", \"brightPurple\": \"#bc3fbc\", \"brightCyan\": \"#0fa8cd\", \"brightWhite\": \"#e5e5e5\", \"background\": \"#262a33\", \"foreground\": \"#e5e5e5\" }, { \"name\": \"Campbell\", \"foreground\": \"#F2F2F2\", \"background\": \"#0C0C0C\", \"colors\": [ \"#0C0C0C\", \"#C50F1F\", \"#13A10E\", \"#C19C00\", \"#0037DA\", \"#881798\", \"#3A96DD\", \"#CCCCCC\", \"#767676\", \"#E74856\", \"#16C60C\", \"#F9F1A5\", \"#3B78FF\", \"#B4009E\", \"#61D6D6\", \"#F2F2F2\" ] }, { \"name\": \"Solarized Dark\", \"foreground\": \"#FDF6E3\", \"background\": \"#073642\", \"colors\": [ \"#073642\", \"#D30102\", \"#859900\", \"#B58900\", \"#268BD2\", \"#D33682\", \"#2AA198\", \"#EEE8D5\", \"#002B36\", \"#CB4B16\", \"#586E75\", \"#657B83\", \"#839496\", \"#6C71C4\", \"#93A1A1\", \"#FDF6E3\" ] } ] 官方配置详解 Something wrong with this article? Click here to submit your revision. Vector Landscape Vectors by Vecteezy document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/Configuration/window-terminal%E7%BE%8E%E5%8C%96%F0%9F%92%96/"},{"title":"Icarus指南","text":"Icarus的默认主题配置文件为_config.icarus.yml。此文件定义了站点全局的布局与样式设置，同时也控制了例如插件与挂件等外部功能的配置。本文详细介绍了主题的一般配置，并且解释了Icarus使用哪些配置文件和它是如何生成并验证这些配置。 配置基础属性_config.icarus.yml12345678910111213141516version: 4.0.0 // 版本号variant: default // 皮肤，目前支持default和cyberpunklogo: /img/logo.svg 或者logo: text: My Beautiful Sitehead: favicon: /img/favicon.svgarticle: // 代码高亮 highlight: # 代码高亮主题 # https://github.com/highlightjs/highlight.js/tree/master/src/styles theme: atom-one-light # 显示复制代码按钮 clipboard: true # 代码块的默认折叠状态。可以是\"\", \"folded\", \"unfolded\" fold: unfolded 折叠代码块 123{% codeblock \"可选文件名\" lang:代码语言 &gt;folded %}...代码块内容...{% endcodeblock %} 文章配置_config.icarus.yml123456789101112131415161718title: Icarus指南 // 标题date: 2020-09-22 // 创建时间tags: // 标签- Icarus指南categories: // 分类- HexoThemelanguage: zh-CN // 语言toc: true // 是否生成目录providers: // 使用cnd地址 cdn: loli fontcdn: loli iconcdn: lolicover: /gallery/covers/beautiful-landscape.svg // 封面图thumbnail: /gallery/covers/beautiful-landscape.svg // 缩略图comment: // 评论search: // 搜索share: // 转发widgets: // 挂件 按钮 Info Success Warning Danger 点击展开代码123456&lt;div class=\"buttons\"&gt; &lt;button class=\"button is-info\"&gt;Info&lt;/button&gt; &lt;button class=\"button is-success\"&gt;Success&lt;/button&gt; &lt;button class=\"button is-warning\"&gt;Warning&lt;/button&gt; &lt;button class=\"button is-danger\"&gt;Danger&lt;/button&gt;&lt;/div&gt; 显示一言增加了一个单击事件 显示一言 ↑↑↑ 试着点击“显示一言”！ function showHitokoto (event) { event.target.classList.add('is-loading'); $.ajax({ type: 'GET', url: 'https://v1.hitokoto.cn/', success: function (data) { $('.hitokoto').text(data.hitokoto); event.target.classList.remove('is-loading'); } }); } 点击展开代码12345678910111213141516&lt;button class=\"button is-info\" onclick=\"showHitokoto(event)\"&gt;显示一言&lt;/button&gt;&lt;blockquote class=\"hitokoto\"&gt;↑↑↑ 试着点击“显示一言”！&lt;/blockquote&gt;&lt;script&gt;function showHitokoto (event) { event.target.classList.add('is-loading'); $.ajax({ type: 'GET', url: 'https://v1.hitokoto.cn/', success: function (data) { $('.hitokoto').text(data.hitokoto); event.target.classList.remove('is-loading'); } });}&lt;/script&gt; 进度条 点击展开代码12345&lt;progress class=\"progress is-info\" value=\"20\" max=\"100\"&gt;&lt;/progress&gt;&lt;progress class=\"progress is-success\" value=\"40\" max=\"100\"&gt;&lt;/progress&gt;&lt;progress class=\"progress is-warning\" value=\"60\" max=\"100\"&gt;&lt;/progress&gt;&lt;progress class=\"progress is-danger\" value=\"80\" max=\"100\"&gt;&lt;/progress&gt;&lt;progress class=\"progress is-info\" max=\"100\"&gt;&lt;/progress&gt; 标签页 Pictures Music Videos Pixabay 是全球知名的图库网站及充满活力的创意社区,拥有上百万张免费正版高清照片素材,涵盖风景、人物、动态、静物等多种分类,你可以在任何地方使用 Pixabay 图库中的素材… 网易云音乐 是一款专注于发现与分享的音乐产品,依托专业音乐人、DJ、好友推荐及社交功能,为用户打造全新的音乐生活。 哔哩哔哩 是国内知名的视频弹幕网站,这里有最及时的动漫新番,最棒的ACG氛围,最有创意的Up主。大家可以在这里找到许多欢乐。 .content .tabs ul { margin: 0; } .tab-content { display: none; } function onTabClick (event) { var tabTitle = $(event.currentTarget).children('span:last-child').text(); $('.article .content .tab-content').css('display', 'none'); $('.article .content .tabs li').removeClass('is-active'); $('#' + tabTitle).css('display', 'block'); $(event.currentTarget).parent().addClass('is-active'); } 点击展开代码 &gt;folded123456789101112131415161718192021222324252627282930313233343536373839&lt;div class=\"tabs is-toggle\"&gt;&lt;ul&gt;&lt;li class=\"is-active\"&gt;&lt;a onclick=\"onTabClick(event)\"&gt;&lt;span class=\"icon is-small\"&gt;&lt;i class=\"fas fa-image\" aria-hidden=\"true\"&gt;&lt;/i&gt;&lt;/span&gt;&lt;span&gt;Pictures&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a onclick=\"onTabClick(event)\"&gt;&lt;span class=\"icon is-small\"&gt;&lt;i class=\"fas fa-music\" aria-hidden=\"true\"&gt;&lt;/i&gt;&lt;/span&gt;&lt;span&gt;Music&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a onclick=\"onTabClick(event)\"&gt;&lt;span class=\"icon is-small\"&gt;&lt;i class=\"fas fa-film\" aria-hidden=\"true\"&gt;&lt;/i&gt;&lt;/span&gt;&lt;span&gt;Videos&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div id=\"Pictures\" class=\"tab-content\" style=\"display: block;\"&gt;[Pixabay](https://pixabay.com/zh/) 是全球知名的图库网站及充满活力的创意社区,拥有上百万张免费正版高清照片素材,涵盖风景、人物、动态、静物等多种分类,你可以在任何地方使用 Pixabay 图库中的素材...&lt;/div&gt;&lt;div id=\"Music\" class=\"tab-content\"&gt;[网易云音乐](https://music.163.com/) 是一款专注于发现与分享的音乐产品,依托专业音乐人、DJ、好友推荐及社交功能,为用户打造全新的音乐生活。&lt;/div&gt;&lt;div id=\"Videos\" class=\"tab-content\"&gt;[哔哩哔哩](https://www.bilibili.com/) 是国内知名的视频弹幕网站,这里有最及时的动漫新番,最棒的ACG氛围,最有创意的Up主。大家可以在这里找到许多欢乐。&lt;/div&gt;&lt;style type=\"text/css\"&gt;.content .tabs ul { margin: 0; }.tab-content { display: none; }&lt;/style&gt;&lt;script&gt;function onTabClick (event) { var tabTitle = $(event.currentTarget).children('span:last-child').text(); $('.article .content .tab-content').css('display', 'none'); $('.article .content .tabs li').removeClass('is-active'); $('#' + tabTitle).css('display', 'block'); $(event.currentTarget).parent().addClass('is-active');}&lt;/script&gt; 或者 点击展开代码 &gt;folded12345678910111213141516171819202122232425262728293031&lt;div class=\"tabs is-boxed my-3\"&gt; &lt;ul class=\"mx-0 my-0\"&gt; &lt;li class=\"is-active\"&gt; &lt;a href=\"#install-source\"&gt; &lt;span class=\"icon is-small\"&gt;&lt;i class=\"fas fa-file-code\" aria-hidden=\"true\"&gt;&lt;/i&gt;&lt;/span&gt; &lt;span&gt;从源码安装&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;li&gt; &lt;a href=\"#install-npm\"&gt; &lt;span class=\"icon is-small\"&gt;&lt;i class=\"fas fa-cubes\" aria-hidden=\"true\"&gt;&lt;/i&gt;&lt;/span&gt; &lt;span&gt;使用NPM安装&lt;/span&gt; &lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;&lt;div id=\"install-source\" class=\"tab-content\"&gt; 从GitHub的仓库中下载源码的压缩包并解压到你Hexo站点的主题目录中。 或者，你可以使用Git来克隆Icarus的代码仓库到`themes`目录下： &lt;figure class=\"highlight plain\"&gt;&lt;figcaption&gt;&lt;span&gt;Git Bash/命令行&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=\"gutter\"&gt;&lt;pre&gt;&lt;span class=\"line\"&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"code\"&gt;&lt;pre&gt;&lt;span class=\"line\"&gt;git clone https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;ppoffice&amp;#x2F;hexo-theme-icarus.git themes&amp;#x2F;icarus -b &amp;lt;version number&amp;gt; --depth 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt; 你可以省略&lt;code&gt;-b &amp;lt;version number&amp;gt;&lt;/code&gt;来获取Icarus的最新开发版本。&lt;br&gt; 如果你想同时下载Git仓库的完整提交历史，请同时省略&lt;code&gt;--depth 1&lt;/code&gt;。&lt;br&gt; 另外，你也可以使用下面的命令将Icarus安装为Git子模块(submodule)：&lt;/p&gt; &lt;figure class=\"highlight plain\"&gt;&lt;figcaption&gt;&lt;span&gt;Git Bash/命令行&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=\"gutter\"&gt;&lt;pre&gt;&lt;span class=\"line\"&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"code\"&gt;&lt;pre&gt;&lt;span class=\"line\"&gt;git submodule add https:&amp;#x2F;&amp;#x2F;github.com&amp;#x2F;ppoffice&amp;#x2F;hexo-theme-icarus.git themes&amp;#x2F;icarus&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;&lt;div id=\"install-npm\" class=\"tab-content is-hidden\"&gt; 若要使用NPM将Icarus安装为Node包，在你的Hexo站点根目录运行如下命令： &lt;figure class=\"highlight plain\"&gt;&lt;figcaption&gt;&lt;span&gt;命令行&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=\"gutter\"&gt;&lt;pre&gt;&lt;span class=\"line\"&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=\"code\"&gt;&lt;pre&gt;&lt;span class=\"line\"&gt;npm install -S hexo-theme-icarus&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt; 彩色突出 Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。 Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。 Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。 Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。 Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。 Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。 Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。 Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。 活用 Bulma 美化 Icarus 文章 Icarus 主题以白色的简洁为主，但有时候我们希望在文章中用特别的样式注明一些内容，markdown 语法就不够用了，所以在此分享一下我的高级玩法。 点击展开代码 &gt;folded1234567891011121314151617181920212223242526272829303132333435363738&lt;div class=\"notification is-info\"&gt;[Icarus](https://blog.zhangruipeng.me/hexo-theme-icarus/) 主题以白色的简洁为主，但有时候我们希望在文章中用**特别的样式**注明一些内容，*markdown* 语法就不够用了，所以在此分享一下我的高级玩法。&lt;/div&gt;&lt;div class=\"notification is-success\"&gt;[Icarus](https://blog.zhangruipeng.me/hexo-theme-icarus/) 主题以白色的简洁为主，但有时候我们希望在文章中用**特别的样式**注明一些内容，*markdown* 语法就不够用了，所以在此分享一下我的高级玩法。&lt;/div&gt;&lt;div class=\"notification is-warning\"&gt;[Icarus](https://blog.zhangruipeng.me/hexo-theme-icarus/) 主题以白色的简洁为主，但有时候我们希望在文章中用**特别的样式**注明一些内容，*markdown* 语法就不够用了，所以在此分享一下我的高级玩法。&lt;/div&gt;&lt;div class=\"notification is-danger\"&gt;[Icarus](https://blog.zhangruipeng.me/hexo-theme-icarus/) 主题以白色的简洁为主，但有时候我们希望在文章中用**特别的样式**注明一些内容，*markdown* 语法就不够用了，所以在此分享一下我的高级玩法。&lt;/div&gt;&lt;article class=\"message is-info\"&gt;&lt;div class=\"message-body\"&gt;[Icarus](https://blog.zhangruipeng.me/hexo-theme-icarus/) 主题以白色的简洁为主，但有时候我们希望在文章中用**特别的样式**注明一些内容，*markdown* 语法就不够用了，所以在此分享一下我的高级玩法。&lt;/div&gt;&lt;/article&gt;&lt;article class=\"message is-success\"&gt;&lt;div class=\"message-body\"&gt;[Icarus](https://blog.zhangruipeng.me/hexo-theme-icarus/) 主题以白色的简洁为主，但有时候我们希望在文章中用**特别的样式**注明一些内容，*markdown* 语法就不够用了，所以在此分享一下我的高级玩法。&lt;/div&gt;&lt;/article&gt;&lt;article class=\"message is-warning\"&gt;&lt;div class=\"message-body\"&gt;[Icarus](https://blog.zhangruipeng.me/hexo-theme-icarus/) 主题以白色的简洁为主，但有时候我们希望在文章中用**特别的样式**注明一些内容，*markdown* 语法就不够用了，所以在此分享一下我的高级玩法。&lt;/div&gt;&lt;/article&gt;&lt;article class=\"message is-danger\"&gt;&lt;div class=\"message-body\"&gt;[Icarus](https://blog.zhangruipeng.me/hexo-theme-icarus/) 主题以白色的简洁为主，但有时候我们希望在文章中用**特别的样式**注明一些内容，*markdown* 语法就不够用了，所以在此分享一下我的高级玩法。&lt;/div&gt;&lt;/article&gt;&lt;article class=\"message is-info\"&gt;&lt;div class=\"message-header\"&gt;活用 Bulma 美化 Icarus 文章&lt;/div&gt;&lt;div class=\"message-body\"&gt;[Icarus](https://blog.zhangruipeng.me/hexo-theme-icarus/) 主题以白色的简洁为主，但有时候我们希望在文章中用**特别的样式**注明一些内容，*markdown* 语法就不够用了，所以在此分享一下我的高级玩法。&lt;/div&gt;&lt;/article&gt; 颜色遮罩(你知道的太多了) .heimu { color: #000; background-color: #000; } .heimu:hover { color: #fff; } .heimu-red { color: red; background-color: red; } .heimu-red:hover { color: #fff; } 我在这里 我在这里 点击展开代码 &gt;folded12345678910&lt;style type=\"text/css\"&gt;.heimu { color: #000; background-color: #000; }.heimu:hover { color: #fff; }.heimu-red { color: red; background-color: red; }.heimu-red:hover { color: #fff; }&lt;/style&gt;&lt;span class=\"heimu\"&gt;我在这里&lt;/span&gt; 封面图来源声明 &nbsp;&nbsp; Vector Landscape Vectors by Vecteezy 点击展开代码1234&lt;a class=\"tag is-dark is-medium\" href=\"https://www.vecteezy.com/free-vector/vector-landscape\" target=\"_blank\"&gt;&lt;span class=\"icon\"&gt;&lt;i class=\"fas fa-camera\"&gt;&lt;/i&gt;&lt;/span&gt;&amp;nbsp;&amp;nbsp;Vector Landscape Vectors by Vecteezy&lt;/a&gt; 官方提供的配置文档 活用 Bulma 美化 Icarus 文章 by iMaeGoo Something wrong with this article? Click here to submit your revision. Vector Landscape Vectors by Vecteezy document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/Hexo/icarus%E6%8C%87%E5%8D%97/"}],"tags":[{"name":"layout","slug":"layout","link":"/tags/layout/"},{"name":"Chocolatey","slug":"Chocolatey","link":"/tags/Chocolatey/"},{"name":"commitizen","slug":"commitizen","link":"/tags/commitizen/"},{"name":"Electron","slug":"Electron","link":"/tags/Electron/"},{"name":"Git操作指南","slug":"Git操作指南","link":"/tags/Git%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/"},{"name":"JavaScript","slug":"JavaScript","link":"/tags/JavaScript/"},{"name":"NodeJs","slug":"NodeJs","link":"/tags/NodeJs/"},{"name":"nrm","slug":"nrm","link":"/tags/nrm/"},{"name":"nvm","slug":"nvm","link":"/tags/nvm/"},{"name":"terminal","slug":"terminal","link":"/tags/terminal/"},{"name":"Hexo-Theme","slug":"Hexo-Theme","link":"/tags/Hexo-Theme/"},{"name":"Icarus指南","slug":"Icarus指南","link":"/tags/Icarus%E6%8C%87%E5%8D%97/"}],"categories":[{"name":"Css","slug":"Css","link":"/categories/Css/"},{"name":"Configuration","slug":"Configuration","link":"/categories/Configuration/"},{"name":"Git","slug":"Git","link":"/categories/Git/"},{"name":"FAQ","slug":"FAQ","link":"/categories/FAQ/"},{"name":"Learning","slug":"Learning","link":"/categories/Learning/"},{"name":"JavaScript深入","slug":"JavaScript深入","link":"/categories/JavaScript%E6%B7%B1%E5%85%A5/"},{"name":"Hexo","slug":"Hexo","link":"/categories/Hexo/"}]}